// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, watchosArm64, watchosDeviceArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <HealthKMP:health>
abstract interface <#A: out kotlin/Any> com.viktormykhailiv.kmp.health/SeriesRecord : com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health/SeriesRecord|null[0]
    abstract val samples // com.viktormykhailiv.kmp.health/SeriesRecord.samples|{}samples[0]
        abstract fun <get-samples>(): kotlin.collections/List<#A> // com.viktormykhailiv.kmp.health/SeriesRecord.samples.<get-samples>|<get-samples>(){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health/HealthAggregatedRecord|null[0]
    abstract val dataType // com.viktormykhailiv.kmp.health/HealthAggregatedRecord.dataType|{}dataType[0]
        abstract fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health/HealthAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/HealthManager { // com.viktormykhailiv.kmp.health/HealthManager|null[0]
    abstract fun isAvailable(): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.isAvailable|isAvailable(){}[0]
    abstract suspend fun aggregate(kotlinx.datetime/Instant, kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health/HealthDataType): kotlin/Result<com.viktormykhailiv.kmp.health/HealthAggregatedRecord> // com.viktormykhailiv.kmp.health/HealthManager.aggregate|aggregate(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.HealthDataType){}[0]
    abstract suspend fun isAuthorized(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>, kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.isAuthorized|isAuthorized(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>;kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>){}[0]
    abstract suspend fun isRevokeAuthorizationSupported(): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.isRevokeAuthorizationSupported|isRevokeAuthorizationSupported(){}[0]
    abstract suspend fun readData(kotlinx.datetime/Instant, kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health/HealthDataType): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthRecord>> // com.viktormykhailiv.kmp.health/HealthManager.readData|readData(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.HealthDataType){}[0]
    abstract suspend fun requestAuthorization(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>, kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>): kotlin/Result<kotlin/Boolean> // com.viktormykhailiv.kmp.health/HealthManager.requestAuthorization|requestAuthorization(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>;kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>){}[0]
    abstract suspend fun revokeAuthorization(): kotlin/Result<kotlin/Unit> // com.viktormykhailiv.kmp.health/HealthManager.revokeAuthorization|revokeAuthorization(){}[0]
    abstract suspend fun writeData(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthRecord>): kotlin/Result<kotlin/Unit> // com.viktormykhailiv.kmp.health/HealthManager.writeData|writeData(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthRecord>){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/HealthRecord { // com.viktormykhailiv.kmp.health/HealthRecord|null[0]
    abstract val dataType // com.viktormykhailiv.kmp.health/HealthRecord.dataType|{}dataType[0]
        abstract fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health/HealthRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    abstract val metadata // com.viktormykhailiv.kmp.health/HealthRecord.metadata|{}metadata[0]
        abstract fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health/HealthRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/InstantaneousRecord : com.viktormykhailiv.kmp.health/HealthRecord { // com.viktormykhailiv.kmp.health/InstantaneousRecord|null[0]
    abstract val time // com.viktormykhailiv.kmp.health/InstantaneousRecord.time|{}time[0]
        abstract fun <get-time>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health/InstantaneousRecord.time.<get-time>|<get-time>(){}[0]
}

abstract interface com.viktormykhailiv.kmp.health/IntervalRecord : com.viktormykhailiv.kmp.health/HealthRecord { // com.viktormykhailiv.kmp.health/IntervalRecord|null[0]
    abstract val endTime // com.viktormykhailiv.kmp.health/IntervalRecord.endTime|{}endTime[0]
        abstract fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health/IntervalRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    abstract val startTime // com.viktormykhailiv.kmp.health/IntervalRecord.startTime|{}startTime[0]
        abstract fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health/IntervalRecord.startTime.<get-startTime>|<get-startTime>(){}[0]
}

sealed interface com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType|null[0]
    final object ChestStrap : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.ChestStrap|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.ChestStrap.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.ChestStrap.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.ChestStrap.toString|toString(){}[0]
    }

    final object FitnessBand : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.FitnessBand|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.FitnessBand.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.FitnessBand.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.FitnessBand.toString|toString(){}[0]
    }

    final object HeadMounted : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.HeadMounted|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.HeadMounted.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.HeadMounted.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.HeadMounted.toString|toString(){}[0]
    }

    final object Phone : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Phone|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Phone.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Phone.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Phone.toString|toString(){}[0]
    }

    final object Ring : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Ring|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Ring.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Ring.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Ring.toString|toString(){}[0]
    }

    final object Scale : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Scale|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Scale.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Scale.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Scale.toString|toString(){}[0]
    }

    final object SmartDisplay : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.SmartDisplay|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.SmartDisplay.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.SmartDisplay.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.SmartDisplay.toString|toString(){}[0]
    }

    final object Unknown : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Unknown|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Unknown.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Unknown.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Unknown.toString|toString(){}[0]
    }

    final object Watch : com.viktormykhailiv.kmp.health.records.metadata/DeviceType { // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Watch|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Watch.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Watch.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/DeviceType.Watch.toString|toString(){}[0]
    }
}

sealed interface com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType|null[0]
    final object Awake : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Awake.toString|toString(){}[0]
    }

    final object AwakeInBed : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.AwakeInBed.toString|toString(){}[0]
    }

    final object Deep : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Deep.toString|toString(){}[0]
    }

    final object Light : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Light|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Light.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Light.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Light.toString|toString(){}[0]
    }

    final object OutOfBed : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.OutOfBed.toString|toString(){}[0]
    }

    final object REM : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.REM|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.REM.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.REM.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.REM.toString|toString(){}[0]
    }

    final object Sleeping : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Sleeping.toString|toString(){}[0]
    }

    final object Unknown : com.viktormykhailiv.kmp.health.records/SleepStageType { // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepStageType.Unknown.toString|toString(){}[0]
    }
}

sealed interface com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType|null[0]
    final object BloodPressure : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.BloodPressure|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.BloodPressure.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.BloodPressure.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.BloodPressure.toString|toString(){}[0]
    }

    final object HeartRate : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.HeartRate|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.HeartRate.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.HeartRate.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.HeartRate.toString|toString(){}[0]
    }

    final object Height : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Height|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Height.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Height.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Height.toString|toString(){}[0]
    }

    final object Sleep : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Sleep|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Sleep.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Sleep.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Sleep.toString|toString(){}[0]
    }

    final object Steps : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Steps|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Steps.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Steps.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Steps.toString|toString(){}[0]
    }

    final object Weight : com.viktormykhailiv.kmp.health/HealthDataType { // com.viktormykhailiv.kmp.health/HealthDataType.Weight|null[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health/HealthDataType.Weight.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health/HealthDataType.Weight.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health/HealthDataType.Weight.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord, com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord) // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.aggregate.BloodPressureAggregatedRecord.AggregatedRecord;com.viktormykhailiv.kmp.health.aggregate.BloodPressureAggregatedRecord.AggregatedRecord){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val diastolic // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.diastolic|{}diastolic[0]
        final fun <get-diastolic>(): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.diastolic.<get-diastolic>|<get-diastolic>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]
    final val systolic // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.systolic|{}systolic[0]
        final fun <get-systolic>(): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.systolic.<get-systolic>|<get-systolic>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.component4|component4(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord = ..., com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord = ...): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.aggregate.BloodPressureAggregatedRecord.AggregatedRecord;com.viktormykhailiv.kmp.health.aggregate.BloodPressureAggregatedRecord.AggregatedRecord){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.toString|toString(){}[0]

    final class AggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord|null[0]
        constructor <init>(com.viktormykhailiv.kmp.health.units/Pressure, com.viktormykhailiv.kmp.health.units/Pressure, com.viktormykhailiv.kmp.health.units/Pressure) // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.<init>|<init>(com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure){}[0]

        final val avg // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.avg|{}avg[0]
            final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
        final val max // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.max|{}max[0]
            final fun <get-max>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.max.<get-max>|<get-max>(){}[0]
        final val min // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.min|{}min[0]
            final fun <get-min>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.min.<get-min>|<get-min>(){}[0]

        final fun component1(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.component1|component1(){}[0]
        final fun component2(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.component2|component2(){}[0]
        final fun component3(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.component3|component3(){}[0]
        final fun copy(com.viktormykhailiv.kmp.health.units/Pressure = ..., com.viktormykhailiv.kmp.health.units/Pressure = ..., com.viktormykhailiv.kmp.health.units/Pressure = ...): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.copy|copy(com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord.AggregatedRecord.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, kotlin/Long, kotlin/Long, kotlin/Long) // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.Long;kotlin.Long;kotlin.Long){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.max|{}max[0]
        final fun <get-max>(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.min|{}min[0]
        final fun <get-min>(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.component2|component2(){}[0]
    final fun component3(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.component3|component3(){}[0]
    final fun component4(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.component4|component4(){}[0]
    final fun component5(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., kotlin/Long = ..., kotlin/Long = ..., kotlin/Long = ...): com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.Long;kotlin.Long;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health.units/Length, com.viktormykhailiv.kmp.health.units/Length, com.viktormykhailiv.kmp.health.units/Length) // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.units.Length){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.max|{}max[0]
        final fun <get-max>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.min|{}min[0]
        final fun <get-min>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., com.viktormykhailiv.kmp.health.units/Length = ..., com.viktormykhailiv.kmp.health.units/Length = ..., com.viktormykhailiv.kmp.health.units/Length = ...): com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.units.Length){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, kotlin.time/Duration) // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.time.Duration){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]
    final val totalDuration // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.totalDuration|{}totalDuration[0]
        final fun <get-totalDuration>(): kotlin.time/Duration // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.totalDuration.<get-totalDuration>|<get-totalDuration>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.component2|component2(){}[0]
    final fun component3(): kotlin.time/Duration // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.component3|component3(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., kotlin.time/Duration = ...): com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.time.Duration){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, kotlin/Long) // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.Long){}[0]

    final val count // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.count|{}count[0]
        final fun <get-count>(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.count.<get-count>|<get-count>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.component2|component2(){}[0]
    final fun component3(): kotlin/Long // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.component3|component3(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., kotlin/Long = ...): com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.Long){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord : com.viktormykhailiv.kmp.health/HealthAggregatedRecord { // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health.units/Mass, com.viktormykhailiv.kmp.health.units/Mass, com.viktormykhailiv.kmp.health.units/Mass) // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass){}[0]

    final val avg // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.avg|{}avg[0]
        final fun <get-avg>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.avg.<get-avg>|<get-avg>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val max // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.max|{}max[0]
        final fun <get-max>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.max.<get-max>|<get-max>(){}[0]
    final val min // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.min|{}min[0]
        final fun <get-min>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.min.<get-min>|<get-min>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.component5|component5(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., com.viktormykhailiv.kmp.health.units/Mass = ..., com.viktormykhailiv.kmp.health.units/Mass = ..., com.viktormykhailiv.kmp.health.units/Mass = ...): com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.units.Mass){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.records.metadata/Device { // com.viktormykhailiv.kmp.health.records.metadata/Device|null[0]
    constructor <init>(com.viktormykhailiv.kmp.health.records.metadata/DeviceType, kotlin/String? = ..., kotlin/String? = ...) // com.viktormykhailiv.kmp.health.records.metadata/Device.<init>|<init>(com.viktormykhailiv.kmp.health.records.metadata.DeviceType;kotlin.String?;kotlin.String?){}[0]

    final val manufacturer // com.viktormykhailiv.kmp.health.records.metadata/Device.manufacturer|{}manufacturer[0]
        final fun <get-manufacturer>(): kotlin/String? // com.viktormykhailiv.kmp.health.records.metadata/Device.manufacturer.<get-manufacturer>|<get-manufacturer>(){}[0]
    final val model // com.viktormykhailiv.kmp.health.records.metadata/Device.model|{}model[0]
        final fun <get-model>(): kotlin/String? // com.viktormykhailiv.kmp.health.records.metadata/Device.model.<get-model>|<get-model>(){}[0]
    final val type // com.viktormykhailiv.kmp.health.records.metadata/Device.type|{}type[0]
        final fun <get-type>(): com.viktormykhailiv.kmp.health.records.metadata/DeviceType // com.viktormykhailiv.kmp.health.records.metadata/Device.type.<get-type>|<get-type>(){}[0]

    final fun component1(): com.viktormykhailiv.kmp.health.records.metadata/DeviceType // com.viktormykhailiv.kmp.health.records.metadata/Device.component1|component1(){}[0]
    final fun component2(): kotlin/String? // com.viktormykhailiv.kmp.health.records.metadata/Device.component2|component2(){}[0]
    final fun component3(): kotlin/String? // com.viktormykhailiv.kmp.health.records.metadata/Device.component3|component3(){}[0]
    final fun copy(com.viktormykhailiv.kmp.health.records.metadata/DeviceType = ..., kotlin/String? = ..., kotlin/String? = ...): com.viktormykhailiv.kmp.health.records.metadata/Device // com.viktormykhailiv.kmp.health.records.metadata/Device.copy|copy(com.viktormykhailiv.kmp.health.records.metadata.DeviceType;kotlin.String?;kotlin.String?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/Device.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/Device.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Device.toString|toString(){}[0]

    final object Companion // com.viktormykhailiv.kmp.health.records.metadata/Device.Companion|null[0]
}

final class com.viktormykhailiv.kmp.health.records.metadata/Metadata { // com.viktormykhailiv.kmp.health.records.metadata/Metadata|null[0]
    final val device // com.viktormykhailiv.kmp.health.records.metadata/Metadata.device|{}device[0]
        final fun <get-device>(): com.viktormykhailiv.kmp.health.records.metadata/Device? // com.viktormykhailiv.kmp.health.records.metadata/Metadata.device.<get-device>|<get-device>(){}[0]
    final val id // com.viktormykhailiv.kmp.health.records.metadata/Metadata.id|{}id[0]
        final fun <get-id>(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.id.<get-id>|<get-id>(){}[0]
    final val recordingMethod // com.viktormykhailiv.kmp.health.records.metadata/Metadata.recordingMethod|{}recordingMethod[0]
        final fun <get-recordingMethod>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod // com.viktormykhailiv.kmp.health.records.metadata/Metadata.recordingMethod.<get-recordingMethod>|<get-recordingMethod>(){}[0]

    final fun component1(): com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod // com.viktormykhailiv.kmp.health.records.metadata/Metadata.component1|component1(){}[0]
    final fun component2(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records.metadata/Device? // com.viktormykhailiv.kmp.health.records.metadata/Metadata.component3|component3(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/Metadata.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/Metadata.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.toString|toString(){}[0]

    sealed interface RecordingMethod { // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod|null[0]
        final object AutoRecorded : com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod { // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.AutoRecorded|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.AutoRecorded.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.AutoRecorded.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.AutoRecorded.toString|toString(){}[0]
        }

        final object ManualEntry : com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod { // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.ManualEntry|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.ManualEntry.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.ManualEntry.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.ManualEntry.toString|toString(){}[0]
        }

        final object Unknown : com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod { // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.Unknown|null[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.Unknown.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.Unknown.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records.metadata/Metadata.RecordingMethod.Unknown.toString|toString(){}[0]
        }
    }

    final object Companion { // com.viktormykhailiv.kmp.health.records.metadata/Metadata.Companion|null[0]
        final fun autoRecorded(kotlin/String = ..., com.viktormykhailiv.kmp.health.records.metadata/Device): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records.metadata/Metadata.Companion.autoRecorded|autoRecorded(kotlin.String;com.viktormykhailiv.kmp.health.records.metadata.Device){}[0]
        final fun manualEntry(kotlin/String = ..., com.viktormykhailiv.kmp.health.records.metadata/Device? = ...): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records.metadata/Metadata.Companion.manualEntry|manualEntry(kotlin.String;com.viktormykhailiv.kmp.health.records.metadata.Device?){}[0]
        final fun unknownRecordingMethod(kotlin/String = ..., com.viktormykhailiv.kmp.health.records.metadata/Device? = ...): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records.metadata/Metadata.Companion.unknownRecordingMethod|unknownRecordingMethod(kotlin.String;com.viktormykhailiv.kmp.health.records.metadata.Device?){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/BloodPressureRecord : com.viktormykhailiv.kmp.health/InstantaneousRecord { // com.viktormykhailiv.kmp.health.records/BloodPressureRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health.units/Pressure, com.viktormykhailiv.kmp.health.units/Pressure, com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition?, com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation?, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.<init>|<init>(kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.records.BloodPressureRecord.BodyPosition?;com.viktormykhailiv.kmp.health.records.BloodPressureRecord.MeasurementLocation?;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val bodyPosition // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.bodyPosition|{}bodyPosition[0]
        final fun <get-bodyPosition>(): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition? // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.bodyPosition.<get-bodyPosition>|<get-bodyPosition>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val diastolic // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.diastolic|{}diastolic[0]
        final fun <get-diastolic>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.diastolic.<get-diastolic>|<get-diastolic>(){}[0]
    final val measurementLocation // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.measurementLocation|{}measurementLocation[0]
        final fun <get-measurementLocation>(): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation? // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.measurementLocation.<get-measurementLocation>|<get-measurementLocation>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val systolic // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.systolic|{}systolic[0]
        final fun <get-systolic>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.systolic.<get-systolic>|<get-systolic>(){}[0]
    final val time // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.time|{}time[0]
        final fun <get-time>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.time.<get-time>|<get-time>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component1|component1(){}[0]
    final fun component2(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition? // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component4|component4(){}[0]
    final fun component5(): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation? // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component5|component5(){}[0]
    final fun component6(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.component6|component6(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., com.viktormykhailiv.kmp.health.units/Pressure = ..., com.viktormykhailiv.kmp.health.units/Pressure = ..., com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition? = ..., com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation? = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/BloodPressureRecord // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.copy|copy(kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.units.Pressure;com.viktormykhailiv.kmp.health.records.BloodPressureRecord.BodyPosition?;com.viktormykhailiv.kmp.health.records.BloodPressureRecord.MeasurementLocation?;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.toString|toString(){}[0]

    final enum class BodyPosition : kotlin/Enum<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition> { // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition|null[0]
        enum entry LyingDown // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.LyingDown|null[0]
        enum entry Reclining // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.Reclining|null[0]
        enum entry SittingDown // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.SittingDown|null[0]
        enum entry StandingUp // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.StandingUp|null[0]

        final val entries // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition> // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition> // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.BodyPosition.values|values#static(){}[0]
    }

    final enum class MeasurementLocation : kotlin/Enum<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation> { // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation|null[0]
        enum entry LeftUpperArm // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.LeftUpperArm|null[0]
        enum entry LeftWrist // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.LeftWrist|null[0]
        enum entry RightUpperArm // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.RightUpperArm|null[0]
        enum entry RightWrist // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.RightWrist|null[0]

        final val entries // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation> // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.entries.<get-entries>|<get-entries>#static(){}[0]

        final fun valueOf(kotlin/String): com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation> // com.viktormykhailiv.kmp.health.records/BloodPressureRecord.MeasurementLocation.values|values#static(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/HeartRateRecord : com.viktormykhailiv.kmp.health/SeriesRecord<com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample> { // com.viktormykhailiv.kmp.health.records/HeartRateRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample>, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/HeartRateRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.HeartRateRecord.Sample>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/HeartRateRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/HeartRateRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.records/HeartRateRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/HeartRateRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/HeartRateRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val samples // com.viktormykhailiv.kmp.health.records/HeartRateRecord.samples|{}samples[0]
        final fun <get-samples>(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample> // com.viktormykhailiv.kmp.health.records/HeartRateRecord.samples.<get-samples>|<get-samples>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/HeartRateRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample> // com.viktormykhailiv.kmp.health.records/HeartRateRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/HeartRateRecord.component4|component4(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample> = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/HeartRateRecord // com.viktormykhailiv.kmp.health.records/HeartRateRecord.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.HeartRateRecord.Sample>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/HeartRateRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/HeartRateRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/HeartRateRecord.toString|toString(){}[0]

    final class Sample { // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample|null[0]
        constructor <init>(kotlinx.datetime/Instant, kotlin/Int) // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.<init>|<init>(kotlinx.datetime.Instant;kotlin.Int){}[0]

        final val beatsPerMinute // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.beatsPerMinute|{}beatsPerMinute[0]
            final fun <get-beatsPerMinute>(): kotlin/Int // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.beatsPerMinute.<get-beatsPerMinute>|<get-beatsPerMinute>(){}[0]
        final val time // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.time|{}time[0]
            final fun <get-time>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.time.<get-time>|<get-time>(){}[0]

        final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.component1|component1(){}[0]
        final fun component2(): kotlin/Int // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.component2|component2(){}[0]
        final fun copy(kotlinx.datetime/Instant = ..., kotlin/Int = ...): com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.copy|copy(kotlinx.datetime.Instant;kotlin.Int){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/HeartRateRecord.Sample.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/HeightRecord : com.viktormykhailiv.kmp.health/InstantaneousRecord { // com.viktormykhailiv.kmp.health.records/HeightRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health.units/Length, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/HeightRecord.<init>|<init>(kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/HeightRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/HeightRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val height // com.viktormykhailiv.kmp.health.records/HeightRecord.height|{}height[0]
        final fun <get-height>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.records/HeightRecord.height.<get-height>|<get-height>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/HeightRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/HeightRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val time // com.viktormykhailiv.kmp.health.records/HeightRecord.time|{}time[0]
        final fun <get-time>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/HeightRecord.time.<get-time>|<get-time>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/HeightRecord.component1|component1(){}[0]
    final fun component2(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.records/HeightRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/HeightRecord.component3|component3(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., com.viktormykhailiv.kmp.health.units/Length = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/HeightRecord // com.viktormykhailiv.kmp.health.records/HeightRecord.copy|copy(kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Length;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/HeightRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/HeightRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/HeightRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.records/SleepSessionRecord : com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health.records/SleepSessionRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage>, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.SleepSessionRecord.Stage>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val stages // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.stages|{}stages[0]
        final fun <get-stages>(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage> // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.stages.<get-stages>|<get-stages>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.component2|component2(){}[0]
    final fun component3(): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage> // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.component4|component4(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage> = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/SleepSessionRecord // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.collections.List<com.viktormykhailiv.kmp.health.records.SleepSessionRecord.Stage>;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.toString|toString(){}[0]

    final class Stage { // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage|null[0]
        constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health.records/SleepStageType) // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.records.SleepStageType){}[0]

        final val endTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.endTime|{}endTime[0]
            final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.endTime.<get-endTime>|<get-endTime>(){}[0]
        final val startTime // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.startTime|{}startTime[0]
            final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.startTime.<get-startTime>|<get-startTime>(){}[0]
        final val type // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.type|{}type[0]
            final fun <get-type>(): com.viktormykhailiv.kmp.health.records/SleepStageType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.type.<get-type>|<get-type>(){}[0]

        final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.component1|component1(){}[0]
        final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.component2|component2(){}[0]
        final fun component3(): com.viktormykhailiv.kmp.health.records/SleepStageType // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.component3|component3(){}[0]
        final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., com.viktormykhailiv.kmp.health.records/SleepStageType = ...): com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.records.SleepStageType){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/SleepSessionRecord.Stage.toString|toString(){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.records/StepsRecord : com.viktormykhailiv.kmp.health/IntervalRecord { // com.viktormykhailiv.kmp.health.records/StepsRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, kotlinx.datetime/Instant, kotlin/Int, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/StepsRecord.<init>|<init>(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.Int;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val count // com.viktormykhailiv.kmp.health.records/StepsRecord.count|{}count[0]
        final fun <get-count>(): kotlin/Int // com.viktormykhailiv.kmp.health.records/StepsRecord.count.<get-count>|<get-count>(){}[0]
    final val dataType // com.viktormykhailiv.kmp.health.records/StepsRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/StepsRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val endTime // com.viktormykhailiv.kmp.health.records/StepsRecord.endTime|{}endTime[0]
        final fun <get-endTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.endTime.<get-endTime>|<get-endTime>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/StepsRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/StepsRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val startTime // com.viktormykhailiv.kmp.health.records/StepsRecord.startTime|{}startTime[0]
        final fun <get-startTime>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.startTime.<get-startTime>|<get-startTime>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.component1|component1(){}[0]
    final fun component2(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/StepsRecord.component2|component2(){}[0]
    final fun component3(): kotlin/Int // com.viktormykhailiv.kmp.health.records/StepsRecord.component3|component3(){}[0]
    final fun component4(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/StepsRecord.component4|component4(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., kotlinx.datetime/Instant = ..., kotlin/Int = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/StepsRecord // com.viktormykhailiv.kmp.health.records/StepsRecord.copy|copy(kotlinx.datetime.Instant;kotlinx.datetime.Instant;kotlin.Int;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/StepsRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/StepsRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/StepsRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.records/WeightRecord : com.viktormykhailiv.kmp.health/InstantaneousRecord { // com.viktormykhailiv.kmp.health.records/WeightRecord|null[0]
    constructor <init>(kotlinx.datetime/Instant, com.viktormykhailiv.kmp.health.units/Mass, com.viktormykhailiv.kmp.health.records.metadata/Metadata) // com.viktormykhailiv.kmp.health.records/WeightRecord.<init>|<init>(kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]

    final val dataType // com.viktormykhailiv.kmp.health.records/WeightRecord.dataType|{}dataType[0]
        final fun <get-dataType>(): com.viktormykhailiv.kmp.health/HealthDataType // com.viktormykhailiv.kmp.health.records/WeightRecord.dataType.<get-dataType>|<get-dataType>(){}[0]
    final val metadata // com.viktormykhailiv.kmp.health.records/WeightRecord.metadata|{}metadata[0]
        final fun <get-metadata>(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/WeightRecord.metadata.<get-metadata>|<get-metadata>(){}[0]
    final val time // com.viktormykhailiv.kmp.health.records/WeightRecord.time|{}time[0]
        final fun <get-time>(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/WeightRecord.time.<get-time>|<get-time>(){}[0]
    final val weight // com.viktormykhailiv.kmp.health.records/WeightRecord.weight|{}weight[0]
        final fun <get-weight>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.records/WeightRecord.weight.<get-weight>|<get-weight>(){}[0]

    final fun component1(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health.records/WeightRecord.component1|component1(){}[0]
    final fun component2(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.records/WeightRecord.component2|component2(){}[0]
    final fun component3(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health.records/WeightRecord.component3|component3(){}[0]
    final fun copy(kotlinx.datetime/Instant = ..., com.viktormykhailiv.kmp.health.units/Mass = ..., com.viktormykhailiv.kmp.health.records.metadata/Metadata = ...): com.viktormykhailiv.kmp.health.records/WeightRecord // com.viktormykhailiv.kmp.health.records/WeightRecord.copy|copy(kotlinx.datetime.Instant;com.viktormykhailiv.kmp.health.units.Mass;com.viktormykhailiv.kmp.health.records.metadata.Metadata){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.records/WeightRecord.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.records/WeightRecord.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.records/WeightRecord.toString|toString(){}[0]
}

final class com.viktormykhailiv.kmp.health.units/Length : kotlin/Comparable<com.viktormykhailiv.kmp.health.units/Length> { // com.viktormykhailiv.kmp.health.units/Length|null[0]
    final val inFeet // com.viktormykhailiv.kmp.health.units/Length.inFeet|{}inFeet[0]
        final fun <get-inFeet>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Length.inFeet.<get-inFeet>|<get-inFeet>(){}[0]
    final val inInches // com.viktormykhailiv.kmp.health.units/Length.inInches|{}inInches[0]
        final fun <get-inInches>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Length.inInches.<get-inInches>|<get-inInches>(){}[0]
    final val inKilometers // com.viktormykhailiv.kmp.health.units/Length.inKilometers|{}inKilometers[0]
        final fun <get-inKilometers>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Length.inKilometers.<get-inKilometers>|<get-inKilometers>(){}[0]
    final val inMeters // com.viktormykhailiv.kmp.health.units/Length.inMeters|{}inMeters[0]
        final fun <get-inMeters>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Length.inMeters.<get-inMeters>|<get-inMeters>(){}[0]
    final val inMiles // com.viktormykhailiv.kmp.health.units/Length.inMiles|{}inMiles[0]
        final fun <get-inMiles>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Length.inMiles.<get-inMiles>|<get-inMiles>(){}[0]

    final fun compareTo(com.viktormykhailiv.kmp.health.units/Length): kotlin/Int // com.viktormykhailiv.kmp.health.units/Length.compareTo|compareTo(com.viktormykhailiv.kmp.health.units.Length){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.units/Length.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.units/Length.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.units/Length.toString|toString(){}[0]

    final object Companion { // com.viktormykhailiv.kmp.health.units/Length.Companion|null[0]
        final fun feet(kotlin/Double): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/Length.Companion.feet|feet(kotlin.Double){}[0]
        final fun inches(kotlin/Double): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/Length.Companion.inches|inches(kotlin.Double){}[0]
        final fun kilometers(kotlin/Double): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/Length.Companion.kilometers|kilometers(kotlin.Double){}[0]
        final fun meters(kotlin/Double): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/Length.Companion.meters|meters(kotlin.Double){}[0]
        final fun miles(kotlin/Double): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/Length.Companion.miles|miles(kotlin.Double){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.units/Mass : kotlin/Comparable<com.viktormykhailiv.kmp.health.units/Mass> { // com.viktormykhailiv.kmp.health.units/Mass|null[0]
    final val inGrams // com.viktormykhailiv.kmp.health.units/Mass.inGrams|{}inGrams[0]
        final fun <get-inGrams>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inGrams.<get-inGrams>|<get-inGrams>(){}[0]
    final val inKilograms // com.viktormykhailiv.kmp.health.units/Mass.inKilograms|{}inKilograms[0]
        final fun <get-inKilograms>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inKilograms.<get-inKilograms>|<get-inKilograms>(){}[0]
    final val inMicrograms // com.viktormykhailiv.kmp.health.units/Mass.inMicrograms|{}inMicrograms[0]
        final fun <get-inMicrograms>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inMicrograms.<get-inMicrograms>|<get-inMicrograms>(){}[0]
    final val inMilligrams // com.viktormykhailiv.kmp.health.units/Mass.inMilligrams|{}inMilligrams[0]
        final fun <get-inMilligrams>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inMilligrams.<get-inMilligrams>|<get-inMilligrams>(){}[0]
    final val inOunces // com.viktormykhailiv.kmp.health.units/Mass.inOunces|{}inOunces[0]
        final fun <get-inOunces>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inOunces.<get-inOunces>|<get-inOunces>(){}[0]
    final val inPounds // com.viktormykhailiv.kmp.health.units/Mass.inPounds|{}inPounds[0]
        final fun <get-inPounds>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Mass.inPounds.<get-inPounds>|<get-inPounds>(){}[0]

    final fun compareTo(com.viktormykhailiv.kmp.health.units/Mass): kotlin/Int // com.viktormykhailiv.kmp.health.units/Mass.compareTo|compareTo(com.viktormykhailiv.kmp.health.units.Mass){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.units/Mass.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.units/Mass.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.units/Mass.toString|toString(){}[0]

    final object Companion { // com.viktormykhailiv.kmp.health.units/Mass.Companion|null[0]
        final fun grams(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.grams|grams(kotlin.Double){}[0]
        final fun kilograms(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.kilograms|kilograms(kotlin.Double){}[0]
        final fun micrograms(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.micrograms|micrograms(kotlin.Double){}[0]
        final fun milligrams(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.milligrams|milligrams(kotlin.Double){}[0]
        final fun ounces(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.ounces|ounces(kotlin.Double){}[0]
        final fun pounds(kotlin/Double): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/Mass.Companion.pounds|pounds(kotlin.Double){}[0]
    }
}

final class com.viktormykhailiv.kmp.health.units/Pressure : kotlin/Comparable<com.viktormykhailiv.kmp.health.units/Pressure> { // com.viktormykhailiv.kmp.health.units/Pressure|null[0]
    final val inMillimetersOfMercury // com.viktormykhailiv.kmp.health.units/Pressure.inMillimetersOfMercury|{}inMillimetersOfMercury[0]
        final fun <get-inMillimetersOfMercury>(): kotlin/Double // com.viktormykhailiv.kmp.health.units/Pressure.inMillimetersOfMercury.<get-inMillimetersOfMercury>|<get-inMillimetersOfMercury>(){}[0]

    final fun compareTo(com.viktormykhailiv.kmp.health.units/Pressure): kotlin/Int // com.viktormykhailiv.kmp.health.units/Pressure.compareTo|compareTo(com.viktormykhailiv.kmp.health.units.Pressure){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // com.viktormykhailiv.kmp.health.units/Pressure.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // com.viktormykhailiv.kmp.health.units/Pressure.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // com.viktormykhailiv.kmp.health.units/Pressure.toString|toString(){}[0]

    final object Companion { // com.viktormykhailiv.kmp.health.units/Pressure.Companion|null[0]
        final fun millimetersOfMercury(kotlin/Double): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.units/Pressure.Companion.millimetersOfMercury|millimetersOfMercury(kotlin.Double){}[0]
    }
}

final class com.viktormykhailiv.kmp.health/HealthManagerFactory { // com.viktormykhailiv.kmp.health/HealthManagerFactory|null[0]
    constructor <init>() // com.viktormykhailiv.kmp.health/HealthManagerFactory.<init>|<init>(){}[0]

    final fun createManager(): com.viktormykhailiv.kmp.health/HealthManager // com.viktormykhailiv.kmp.health/HealthManagerFactory.createManager|createManager(){}[0]
}

final class com.viktormykhailiv.kmp.health/SwiftHealthManager { // com.viktormykhailiv.kmp.health/SwiftHealthManager|null[0]
    constructor <init>(com.viktormykhailiv.kmp.health/HealthManager) // com.viktormykhailiv.kmp.health/SwiftHealthManager.<init>|<init>(com.viktormykhailiv.kmp.health.HealthManager){}[0]

    final fun isAvailable(): kotlin/Boolean // com.viktormykhailiv.kmp.health/SwiftHealthManager.isAvailable|isAvailable(){}[0]
    final suspend fun aggregate(platform.Foundation/NSDate, platform.Foundation/NSDate, com.viktormykhailiv.kmp.health/HealthDataType): com.viktormykhailiv.kmp.health/HealthAggregatedRecord // com.viktormykhailiv.kmp.health/SwiftHealthManager.aggregate|aggregate(platform.Foundation.NSDate;platform.Foundation.NSDate;com.viktormykhailiv.kmp.health.HealthDataType){}[0]
    final suspend fun isAuthorized(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>, kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>): kotlin/Boolean // com.viktormykhailiv.kmp.health/SwiftHealthManager.isAuthorized|isAuthorized(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>;kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>){}[0]
    final suspend fun isRevokeAuthorizationSupported(): kotlin/Boolean // com.viktormykhailiv.kmp.health/SwiftHealthManager.isRevokeAuthorizationSupported|isRevokeAuthorizationSupported(){}[0]
    final suspend fun readData(platform.Foundation/NSDate, platform.Foundation/NSDate, com.viktormykhailiv.kmp.health/HealthDataType): kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthRecord> // com.viktormykhailiv.kmp.health/SwiftHealthManager.readData|readData(platform.Foundation.NSDate;platform.Foundation.NSDate;com.viktormykhailiv.kmp.health.HealthDataType){}[0]
    final suspend fun requestAuthorization(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>, kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthDataType>): kotlin/Boolean // com.viktormykhailiv.kmp.health/SwiftHealthManager.requestAuthorization|requestAuthorization(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>;kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthDataType>){}[0]
    final suspend fun revokeAuthorization() // com.viktormykhailiv.kmp.health/SwiftHealthManager.revokeAuthorization|revokeAuthorization(){}[0]
    final suspend fun writeData(kotlin.collections/List<com.viktormykhailiv.kmp.health/HealthRecord>) // com.viktormykhailiv.kmp.health/SwiftHealthManager.writeData|writeData(kotlin.collections.List<com.viktormykhailiv.kmp.health.HealthRecord>){}[0]
}

final val com.viktormykhailiv.kmp.health.units/feet // com.viktormykhailiv.kmp.health.units/feet|@kotlin.Double{}feet[0]
    final fun (kotlin/Double).<get-feet>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/feet.<get-feet>|<get-feet>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/feet // com.viktormykhailiv.kmp.health.units/feet|@kotlin.Float{}feet[0]
    final fun (kotlin/Float).<get-feet>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/feet.<get-feet>|<get-feet>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/feet // com.viktormykhailiv.kmp.health.units/feet|@kotlin.Int{}feet[0]
    final fun (kotlin/Int).<get-feet>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/feet.<get-feet>|<get-feet>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/feet // com.viktormykhailiv.kmp.health.units/feet|@kotlin.Long{}feet[0]
    final fun (kotlin/Long).<get-feet>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/feet.<get-feet>|<get-feet>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Double{}grams[0]
    final fun (kotlin/Double).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Float{}grams[0]
    final fun (kotlin/Float).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Int{}grams[0]
    final fun (kotlin/Int).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/grams // com.viktormykhailiv.kmp.health.units/grams|@kotlin.Long{}grams[0]
    final fun (kotlin/Long).<get-grams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/grams.<get-grams>|<get-grams>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/inches // com.viktormykhailiv.kmp.health.units/inches|@kotlin.Double{}inches[0]
    final fun (kotlin/Double).<get-inches>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/inches.<get-inches>|<get-inches>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/inches // com.viktormykhailiv.kmp.health.units/inches|@kotlin.Float{}inches[0]
    final fun (kotlin/Float).<get-inches>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/inches.<get-inches>|<get-inches>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/inches // com.viktormykhailiv.kmp.health.units/inches|@kotlin.Int{}inches[0]
    final fun (kotlin/Int).<get-inches>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/inches.<get-inches>|<get-inches>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/inches // com.viktormykhailiv.kmp.health.units/inches|@kotlin.Long{}inches[0]
    final fun (kotlin/Long).<get-inches>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/inches.<get-inches>|<get-inches>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Double{}kilograms[0]
    final fun (kotlin/Double).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Float{}kilograms[0]
    final fun (kotlin/Float).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Int{}kilograms[0]
    final fun (kotlin/Int).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilograms // com.viktormykhailiv.kmp.health.units/kilograms|@kotlin.Long{}kilograms[0]
    final fun (kotlin/Long).<get-kilograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/kilograms.<get-kilograms>|<get-kilograms>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilometers // com.viktormykhailiv.kmp.health.units/kilometers|@kotlin.Double{}kilometers[0]
    final fun (kotlin/Double).<get-kilometers>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/kilometers.<get-kilometers>|<get-kilometers>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilometers // com.viktormykhailiv.kmp.health.units/kilometers|@kotlin.Float{}kilometers[0]
    final fun (kotlin/Float).<get-kilometers>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/kilometers.<get-kilometers>|<get-kilometers>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilometers // com.viktormykhailiv.kmp.health.units/kilometers|@kotlin.Int{}kilometers[0]
    final fun (kotlin/Int).<get-kilometers>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/kilometers.<get-kilometers>|<get-kilometers>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/kilometers // com.viktormykhailiv.kmp.health.units/kilometers|@kotlin.Long{}kilometers[0]
    final fun (kotlin/Long).<get-kilometers>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/kilometers.<get-kilometers>|<get-kilometers>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/meters // com.viktormykhailiv.kmp.health.units/meters|@kotlin.Double{}meters[0]
    final fun (kotlin/Double).<get-meters>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/meters.<get-meters>|<get-meters>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/meters // com.viktormykhailiv.kmp.health.units/meters|@kotlin.Float{}meters[0]
    final fun (kotlin/Float).<get-meters>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/meters.<get-meters>|<get-meters>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/meters // com.viktormykhailiv.kmp.health.units/meters|@kotlin.Int{}meters[0]
    final fun (kotlin/Int).<get-meters>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/meters.<get-meters>|<get-meters>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/meters // com.viktormykhailiv.kmp.health.units/meters|@kotlin.Long{}meters[0]
    final fun (kotlin/Long).<get-meters>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/meters.<get-meters>|<get-meters>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Double{}micrograms[0]
    final fun (kotlin/Double).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Float{}micrograms[0]
    final fun (kotlin/Float).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Int{}micrograms[0]
    final fun (kotlin/Int).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/micrograms // com.viktormykhailiv.kmp.health.units/micrograms|@kotlin.Long{}micrograms[0]
    final fun (kotlin/Long).<get-micrograms>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/micrograms.<get-micrograms>|<get-micrograms>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/miles // com.viktormykhailiv.kmp.health.units/miles|@kotlin.Double{}miles[0]
    final fun (kotlin/Double).<get-miles>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/miles.<get-miles>|<get-miles>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/miles // com.viktormykhailiv.kmp.health.units/miles|@kotlin.Float{}miles[0]
    final fun (kotlin/Float).<get-miles>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/miles.<get-miles>|<get-miles>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/miles // com.viktormykhailiv.kmp.health.units/miles|@kotlin.Int{}miles[0]
    final fun (kotlin/Int).<get-miles>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/miles.<get-miles>|<get-miles>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/miles // com.viktormykhailiv.kmp.health.units/miles|@kotlin.Long{}miles[0]
    final fun (kotlin/Long).<get-miles>(): com.viktormykhailiv.kmp.health.units/Length // com.viktormykhailiv.kmp.health.units/miles.<get-miles>|<get-miles>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Double{}milligrams[0]
    final fun (kotlin/Double).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Float{}milligrams[0]
    final fun (kotlin/Float).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Int{}milligrams[0]
    final fun (kotlin/Int).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/milligrams // com.viktormykhailiv.kmp.health.units/milligrams|@kotlin.Long{}milligrams[0]
    final fun (kotlin/Long).<get-milligrams>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/milligrams.<get-milligrams>|<get-milligrams>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/millimetersOfMercury // com.viktormykhailiv.kmp.health.units/millimetersOfMercury|@kotlin.Double{}millimetersOfMercury[0]
    final fun (kotlin/Double).<get-millimetersOfMercury>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.units/millimetersOfMercury.<get-millimetersOfMercury>|<get-millimetersOfMercury>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/millimetersOfMercury // com.viktormykhailiv.kmp.health.units/millimetersOfMercury|@kotlin.Float{}millimetersOfMercury[0]
    final fun (kotlin/Float).<get-millimetersOfMercury>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.units/millimetersOfMercury.<get-millimetersOfMercury>|<get-millimetersOfMercury>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/millimetersOfMercury // com.viktormykhailiv.kmp.health.units/millimetersOfMercury|@kotlin.Int{}millimetersOfMercury[0]
    final fun (kotlin/Int).<get-millimetersOfMercury>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.units/millimetersOfMercury.<get-millimetersOfMercury>|<get-millimetersOfMercury>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/millimetersOfMercury // com.viktormykhailiv.kmp.health.units/millimetersOfMercury|@kotlin.Long{}millimetersOfMercury[0]
    final fun (kotlin/Long).<get-millimetersOfMercury>(): com.viktormykhailiv.kmp.health.units/Pressure // com.viktormykhailiv.kmp.health.units/millimetersOfMercury.<get-millimetersOfMercury>|<get-millimetersOfMercury>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Double{}ounces[0]
    final fun (kotlin/Double).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Float{}ounces[0]
    final fun (kotlin/Float).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Int{}ounces[0]
    final fun (kotlin/Int).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/ounces // com.viktormykhailiv.kmp.health.units/ounces|@kotlin.Long{}ounces[0]
    final fun (kotlin/Long).<get-ounces>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/ounces.<get-ounces>|<get-ounces>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Double{}pounds[0]
    final fun (kotlin/Double).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Double(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Float{}pounds[0]
    final fun (kotlin/Float).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Float(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Int{}pounds[0]
    final fun (kotlin/Int).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Int(){}[0]
final val com.viktormykhailiv.kmp.health.units/pounds // com.viktormykhailiv.kmp.health.units/pounds|@kotlin.Long{}pounds[0]
    final fun (kotlin/Long).<get-pounds>(): com.viktormykhailiv.kmp.health.units/Mass // com.viktormykhailiv.kmp.health.units/pounds.<get-pounds>|<get-pounds>@kotlin.Long(){}[0]
final val com.viktormykhailiv.kmp.health/duration // com.viktormykhailiv.kmp.health/duration|@com.viktormykhailiv.kmp.health.IntervalRecord{}duration[0]
    final fun (com.viktormykhailiv.kmp.health/IntervalRecord).<get-duration>(): kotlin.time/Duration // com.viktormykhailiv.kmp.health/duration.<get-duration>|<get-duration>@com.viktormykhailiv.kmp.health.IntervalRecord(){}[0]

final fun (com.viktormykhailiv.kmp.health.records.metadata/Device.Companion).com.viktormykhailiv.kmp.health.records.metadata/getLocalDevice(): com.viktormykhailiv.kmp.health.records.metadata/Device // com.viktormykhailiv.kmp.health.records.metadata/getLocalDevice|getLocalDevice@com.viktormykhailiv.kmp.health.records.metadata.Device.Companion(){}[0]
final fun (kotlinx.datetime/Instant).com.viktormykhailiv.kmp.health/toNSDate(): platform.Foundation/NSDate // com.viktormykhailiv.kmp.health/toNSDate|toNSDate@kotlinx.datetime.Instant(){}[0]
final fun (platform.Foundation/NSDate).com.viktormykhailiv.kmp.health/toKotlinInstant(): kotlinx.datetime/Instant // com.viktormykhailiv.kmp.health/toKotlinInstant|toKotlinInstant@platform.Foundation.NSDate(){}[0]
final fun com.viktormykhailiv.kmp.health/generateManualEntryMetadata(): com.viktormykhailiv.kmp.health.records.metadata/Metadata // com.viktormykhailiv.kmp.health/generateManualEntryMetadata|generateManualEntryMetadata(){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateBloodPressure(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateBloodPressure|aggregateBloodPressure@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateHeartRate(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateHeartRate|aggregateHeartRate@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateHeight(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateHeight|aggregateHeight@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateSleep(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateSleep|aggregateSleep@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateSteps(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateSteps|aggregateSteps@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/aggregateWeight(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord> // com.viktormykhailiv.kmp.health/aggregateWeight|aggregateWeight@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readBloodPressure(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/BloodPressureRecord>> // com.viktormykhailiv.kmp.health/readBloodPressure|readBloodPressure@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readHeartRate(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord>> // com.viktormykhailiv.kmp.health/readHeartRate|readHeartRate@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readHeight(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeightRecord>> // com.viktormykhailiv.kmp.health/readHeight|readHeight@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readSleep(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord>> // com.viktormykhailiv.kmp.health/readSleep|readSleep@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readSteps(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/StepsRecord>> // com.viktormykhailiv.kmp.health/readSteps|readSteps@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/HealthManager).com.viktormykhailiv.kmp.health/readWeight(kotlinx.datetime/Instant, kotlinx.datetime/Instant): kotlin/Result<kotlin.collections/List<com.viktormykhailiv.kmp.health.records/WeightRecord>> // com.viktormykhailiv.kmp.health/readWeight|readWeight@com.viktormykhailiv.kmp.health.HealthManager(kotlinx.datetime.Instant;kotlinx.datetime.Instant){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateBloodPressure(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/BloodPressureAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateBloodPressure|aggregateBloodPressure@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateHeartRate(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/HeartRateAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateHeartRate|aggregateHeartRate@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateHeight(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/HeightAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateHeight|aggregateHeight@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateSleep(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/SleepAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateSleep|aggregateSleep@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateSteps(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/StepsAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateSteps|aggregateSteps@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/aggregateWeight(platform.Foundation/NSDate, platform.Foundation/NSDate): com.viktormykhailiv.kmp.health.aggregate/WeightAggregatedRecord // com.viktormykhailiv.kmp.health/aggregateWeight|aggregateWeight@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readBloodPressure(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/BloodPressureRecord> // com.viktormykhailiv.kmp.health/readBloodPressure|readBloodPressure@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readHeartRage(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeartRateRecord> // com.viktormykhailiv.kmp.health/readHeartRage|readHeartRage@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readHeight(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/HeightRecord> // com.viktormykhailiv.kmp.health/readHeight|readHeight@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readSleep(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/SleepSessionRecord> // com.viktormykhailiv.kmp.health/readSleep|readSleep@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readSteps(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/StepsRecord> // com.viktormykhailiv.kmp.health/readSteps|readSteps@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
final suspend fun (com.viktormykhailiv.kmp.health/SwiftHealthManager).com.viktormykhailiv.kmp.health/readWeight(platform.Foundation/NSDate, platform.Foundation/NSDate): kotlin.collections/List<com.viktormykhailiv.kmp.health.records/WeightRecord> // com.viktormykhailiv.kmp.health/readWeight|readWeight@com.viktormykhailiv.kmp.health.SwiftHealthManager(platform.Foundation.NSDate;platform.Foundation.NSDate){}[0]
